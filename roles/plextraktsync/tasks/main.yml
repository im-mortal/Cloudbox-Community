#########################################################################
# Title:            Community: PlexTraktSync                            #
# Author(s):        im-mortal                                           #
# URL:              https://github.com/Cloudbox/Community               #
# Docker Image(s):  ghcr.io/taxel/plextraktsync                         #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Stop and remove any existing container
  docker_container:
    name: "{{ role_name }}"
    state: absent

- name: "Create {{ role_name }} directories"
  file: "path={{ item }} state=directory mode=0775 owner={{ user.name }} group={{ user.name }}"
  with_items:
    - "/opt/{{ role_name }}"

- name: Create and start container
  docker_container:
    name: "{{ role_name }}"
    image: ghcr.io/taxel/plextraktsync
    pull: yes
    env:
      TZ: "{{ tz }}"
      PUID: "{{ uid }}"
      PGID: "{{ gid }}"
      PLEX_BASEURL: "{{ role_name.plex_baseurl | default(omit) }}"
      PLEX_LOCALURL: "{{ role_name.plex_localurl | default(omit) }}"
      PLEX_TOKEN: "{{ role_name.plex_token | default(omit) }}"
      PLEX_USERNAME: "{{ role_name.plex_username | default(omit) }}"
      TRAKT_USERNAME: "{{ role_name.trakt_username | default(omit) }}"
    command: watch
    volumes:
      - "/opt/{{ role_name }}:/app/config"
    labels:
      "com.github.cloudbox.cloudbox_managed": "true"
    networks:
      - name: cloudbox
        aliases:
          - "{{ role_name }}"
    purge_networks: yes
    restart_policy: unless-stopped
    state: started

- name: "Check if '{{ role_name }}.service' exists"
  stat:
    path: '/etc/systemd/system/{{ role_name }}.service'
  register: plextraktsync_service

- name: "Import '{{ role_name }}.service' file"
  template:
    src: "systemd/{{ role_name }}.service.j2"
    dest: "/etc/systemd/system/{{ role_name }}.service"
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0775
    force: yes
  when: not plextraktsync_service.stat.exists

- name: "Check if '{{ role_name }}.timer' exists"
  stat:
    path: '/etc/systemd/system/{{ role_name }}.timer'
  register: plextraktsync_timer

- name: "Import '{{ role_name }}.timer' file"
  template:
    src: "systemd/{{ role_name }}.timer.j2"
    dest: "/etc/systemd/system/{{ role_name }}.timer"
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0775
    force: yes
  when: not plextraktsync_timer.stat.exists

- name: Start 'plextraktsync.timer'
  systemd:
    state: started
    name: "{{ role_name }}.timer"
    daemon_reload: yes
    enabled: yes

- name: "Check if '{{ role_name }}' logrotate config exists"
  stat:
    path: "/etc/logrotate.d/{{ role_name }}"
  register: plextraktsync_logrotate_confd

- name: "Configure logrotate for {{ role_name }}"
  blockinfile:
    path: "/etc/logrotate.d/{{ role_name }}"
    block: |
      /opt/{{ role_name }}/*.log {
        rotate 5
        compress
        missingok
        notifempty
        postrotate
          docker restart {{ role_name }}
        endscript
      }
    create: true
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0775
  when: not plextraktsync_logrotate_confd.stat.exists
